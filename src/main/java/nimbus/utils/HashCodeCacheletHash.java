package nimbus.utils;

import java.util.Set;

/**
 * This class uses {@link String#hashCode()} function to determine which
 * Cachelets should hold a particular key. <br>
 * <br>
 * Note that the distribution of the keys are not random, as the key is hashed
 * once and then the number of keys is generated by incrementing this hash (mod
 * number of Cachelets) and adding it to the set; i.e. a key that hashes to 1
 * with 3 replications and 8 Cachelets will return 1, 2, and 3. A key that
 * hashes to 6 will return 6, 7, and 0.
 */
public class HashCodeCacheletHash extends ICacheletHash {

	@Override
	public void getCacheletsFromKey(String key, Set<Integer> set,
			int numCachelets, int replication) {

		int hash = Math.abs(key.hashCode() % numCachelets);

		for (int i = 0; i < replication; ++i) {
			set.add((hash + i) % numCachelets);
		}
	}
}