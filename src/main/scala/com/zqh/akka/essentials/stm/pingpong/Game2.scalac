package com.zqh.akka.essentials.stm.pingpong

import scala.concurrent.ExecutionContext.Implicits.global
import akka.actor.ActorSystem
import akka.agent.Agent
import akka.util.Timeout
import scala.concurrent.duration._

/**
 * Created by hadoop on 15-2-27.
 */
object Game2 {

  def main(args: Array[String]): Unit = {

    val _system = ActorSystem("Agent-example")
    //val turn = Agent(new String)(_system)
    val turn = Agent(5)
    val table = new PingPong(turn)

    val alice = new Thread(new Player("bob", table))
    val bob = new Thread(new Player("alice", table))

    alice.setName("alice")
    bob.setName("bob")

    alice.start() // alice starts playing
    bob.start() // bob starts playing
    try {
      // Wait .5 seconds
      Thread.sleep(500)
    } catch {
      case _ : Throwable =>
      // eat the exception
    }
    table.hit("DONE") // cause the players to quit their threads.
    try {
      Thread.sleep(1000)
    } catch {
      case _: Throwable =>
      // eat the exception
    }
    _system.shutdown
  }
}

class PingPong(whoseTurn: Agent[String]) {
  implicit val timeout = Timeout(5 seconds)

  def hit(opponent: String): Boolean = {

    val x: String = Thread.currentThread().getName

    //wait till all the messages are processed to make
    //you get the correct value, as updated to Agents are async
    val result: String = whoseTurn.await

    if (result == "") {
      whoseTurn send x
      return true
    } else if (result.compareTo(x) == 0) {
      println("PING! (" + x + ")")
      whoseTurn send opponent
      return true
    } else {
      try {
        val t1 = System.currentTimeMillis()
        wait(2500)
        if ((System.currentTimeMillis() - t1) > 2500) {
          println("****** TIMEOUT! " + x
            + " is waiting for " + whoseTurn + " to play.")
        }
      } catch {
        case _ : Throwable =>
        // eat the exception
      }
    }
    if (opponent.compareTo("DONE") == 0) {
      whoseTurn send opponent
      return false
    }
    if (result.compareTo("DONE") == 0)
      return false
    return true // keep playing.
  }
}

class Player(myOpponent: String, myTable: PingPong) extends Runnable {

  override def run(): Unit = {
    while (myTable.hit(myOpponent)) {}
  }
}
